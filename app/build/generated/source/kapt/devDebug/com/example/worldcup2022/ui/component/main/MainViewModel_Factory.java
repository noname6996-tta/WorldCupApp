// Generated by Dagger (https://dagger.dev).
package com.example.worldcup2022.ui.component.main;

import com.example.worldcup2022.data.DataRepositorySource;
import com.example.worldcup2022.ui.base.BaseViewModel_MembersInjector;
import com.example.worldcup2022.usecase.errors.ErrorManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<DataRepositorySource> dataRepositoryRepositoryProvider;

  private final Provider<ErrorManager> errorManagerProvider;

  public MainViewModel_Factory(Provider<DataRepositorySource> dataRepositoryRepositoryProvider,
      Provider<ErrorManager> errorManagerProvider) {
    this.dataRepositoryRepositoryProvider = dataRepositoryRepositoryProvider;
    this.errorManagerProvider = errorManagerProvider;
  }

  @Override
  public MainViewModel get() {
    MainViewModel instance = newInstance(dataRepositoryRepositoryProvider.get());
    BaseViewModel_MembersInjector.injectErrorManager(instance, errorManagerProvider.get());
    return instance;
  }

  public static MainViewModel_Factory create(
      Provider<DataRepositorySource> dataRepositoryRepositoryProvider,
      Provider<ErrorManager> errorManagerProvider) {
    return new MainViewModel_Factory(dataRepositoryRepositoryProvider, errorManagerProvider);
  }

  public static MainViewModel newInstance(DataRepositorySource dataRepositoryRepository) {
    return new MainViewModel(dataRepositoryRepository);
  }
}
