// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.worldcup2022.`data`.dto.frames

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class FramesJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Frames>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "name_vi", "folder",
      "icon", "cover", "totalImage", "lock", "openPackageName", "defines")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "totalImage")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "lock")

  private val listOfDefinesFramesAdapter: JsonAdapter<List<DefinesFrames>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, DefinesFrames::class.java),
      emptySet(), "defines")

  @Volatile
  private var constructorRef: Constructor<Frames>? = null

  public override fun toString(): String = buildString(28) {
      append("GeneratedJsonAdapter(").append("Frames").append(')') }

  public override fun fromJson(reader: JsonReader): Frames {
    var name: String? = null
    var name_vi: String? = null
    var folder: String? = null
    var icon: String? = null
    var cover: String? = null
    var totalImage: Int? = 0
    var lock: Boolean? = false
    var openPackageName: String? = null
    var defines: List<DefinesFrames>? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          name_vi = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name_vi",
              "name_vi", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          folder = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("folder", "folder",
              reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          icon = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("icon", "icon", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          cover = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("cover", "cover",
              reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          totalImage = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("totalImage",
              "totalImage", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          lock = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("lock", "lock",
              reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          openPackageName = stringAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("openPackageName", "openPackageName", reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          defines = listOfDefinesFramesAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("defines", "defines", reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffe00.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Frames(
          name = name as String,
          name_vi = name_vi as String,
          folder = folder as String,
          icon = icon as String,
          cover = cover as String,
          totalImage = totalImage as Int,
          lock = lock as Boolean,
          openPackageName = openPackageName as String,
          defines = defines as List<DefinesFrames>
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Frames> = this.constructorRef ?:
          Frames::class.java.getDeclaredConstructor(String::class.java, String::class.java,
          String::class.java, String::class.java, String::class.java, Int::class.javaPrimitiveType,
          Boolean::class.javaPrimitiveType, String::class.java, List::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          name,
          name_vi,
          folder,
          icon,
          cover,
          totalImage,
          lock,
          openPackageName,
          defines,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Frames?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("name_vi")
    stringAdapter.toJson(writer, value_.name_vi)
    writer.name("folder")
    stringAdapter.toJson(writer, value_.folder)
    writer.name("icon")
    stringAdapter.toJson(writer, value_.icon)
    writer.name("cover")
    stringAdapter.toJson(writer, value_.cover)
    writer.name("totalImage")
    intAdapter.toJson(writer, value_.totalImage)
    writer.name("lock")
    booleanAdapter.toJson(writer, value_.lock)
    writer.name("openPackageName")
    stringAdapter.toJson(writer, value_.openPackageName)
    writer.name("defines")
    listOfDefinesFramesAdapter.toJson(writer, value_.defines)
    writer.endObject()
  }
}
