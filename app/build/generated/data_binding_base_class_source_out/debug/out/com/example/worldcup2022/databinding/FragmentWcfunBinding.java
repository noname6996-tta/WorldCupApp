// Generated by view binder compiler. Do not edit!
package com.example.worldcup2022.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.worldcup2022.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentWcfunBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FrameLayout frameWcFun;

  @NonNull
  public final ImageView imgHeader;

  @NonNull
  public final View view9;

  @NonNull
  public final ImageView viewFirstLayout;

  @NonNull
  public final ImageView viewSencondLayout;

  private FragmentWcfunBinding(@NonNull ConstraintLayout rootView, @NonNull FrameLayout frameWcFun,
      @NonNull ImageView imgHeader, @NonNull View view9, @NonNull ImageView viewFirstLayout,
      @NonNull ImageView viewSencondLayout) {
    this.rootView = rootView;
    this.frameWcFun = frameWcFun;
    this.imgHeader = imgHeader;
    this.view9 = view9;
    this.viewFirstLayout = viewFirstLayout;
    this.viewSencondLayout = viewSencondLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentWcfunBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentWcfunBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_wcfun, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentWcfunBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.frameWcFun;
      FrameLayout frameWcFun = ViewBindings.findChildViewById(rootView, id);
      if (frameWcFun == null) {
        break missingId;
      }

      id = R.id.imgHeader;
      ImageView imgHeader = ViewBindings.findChildViewById(rootView, id);
      if (imgHeader == null) {
        break missingId;
      }

      id = R.id.view9;
      View view9 = ViewBindings.findChildViewById(rootView, id);
      if (view9 == null) {
        break missingId;
      }

      id = R.id.viewFirstLayout;
      ImageView viewFirstLayout = ViewBindings.findChildViewById(rootView, id);
      if (viewFirstLayout == null) {
        break missingId;
      }

      id = R.id.viewSencondLayout;
      ImageView viewSencondLayout = ViewBindings.findChildViewById(rootView, id);
      if (viewSencondLayout == null) {
        break missingId;
      }

      return new FragmentWcfunBinding((ConstraintLayout) rootView, frameWcFun, imgHeader, view9,
          viewFirstLayout, viewSencondLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
